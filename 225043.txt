Дел 2: Софтверски развој со користење на Git систем за контрола на верзии

13. # Правиме "fetch" за да ги добиеме последните промени на репозиториумот но не да ги синхронизираме со нашиот локален репозиториум
git fetch origin

14. # Со "git checkout <branch>" командата, ние се префрламе на соодветните гранки кои ги направивме преку Projects
git checkout 2-find-all-completed-tasks
git checkout 5-filter-tasks-by-category
git checkout 7-count-tasks-per-category

15. # Со помош на IDE правиме имплементација на соодветните функции.

16. # За да направиме "commit" мора прво да ги додадеме променетите датотеки па да ја искористиме git commit командата

# Команди за branch 2-find-all-completed-tasks:
git add SI2025Lab1Main.java
git commit -m "Implement getCompletedTasks"

# Команди за branch 5-filter-tasks-by-category
git add SI2025Lab1Main.java
git commit -m "Implement filterTasksByCategory"

# Команди за branch 7-count-tasks-per-category
git add SI2025Lab1Main.java
git commit -m "Implement countTasksPerCategory"

17. # Правиме синхронизација на локалните гранки со гранките на оддалечениот репозиториум
git push -u origin 2-find-all-completed-tasks
git push -u origin 5-filter-tasks-by-category
git push -u origin 7-count-tasks-per-category

18. # На GitHub правиме pull request за сите три гранки на кои што направивме промени во претходните чекори

20. # Ги одобруваме два од трите pull requests што ги направивме.
# Не се случи "git merge conflict" во текот на овие две операции.

22. # Во овој чекор треба да направиме merge на третата гранка со master гранката локално преку терминал.
# Прво треба да се префрлиме на master гранката користејќи ја командата:
git checkout master

# Потоа треба да направиме merge користејќи:
git merge 2-find-all-completed-tasks

# При извршување на merge операцијата за оваа гранка, не се случи "git merge conflict".

23. # Сега треба да направиме синхронизација на репозиториумот

git pull origin master
git push -u origin master

# При извршување на овие операции, не се случи "git merge conflict".

25. # Додаваме текст дадотека што претставува log од git репозиториумот
git log --oneline --graph --all

# Ги додаваме сите датотеки што се наоѓаат во фолдерот каде што ни е репозиториумот и правиме commit
git add .
git commit -m "Final commit"
git push -u origin master

Дел 3: Forking git workflow

28. # Правиме клон на fork од репозиториумот
git clone https://github.com/AndrejStojkovic/SI_2025_lab1_151020.git

29. # Додаваме датотека со наш индекс како име на датотеката и внатре во нејзе нашето име и презиме и правиме commit
git add 225043.txt
git commit -m "Add file"

30. # Правиме синхронизација на репозиториумот
git push -u origin master
